version: '3.8'

services:
  backend:
    build:
      context: ..
      dockerfile: devops/Dockerfiles/Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka
      - redis
    volumes:
      - ../ml/models:/app/ml/models
      - ../.env:/app/.env
    networks:
      - cyber-net

  dashboard:
    build:
      context: ..
      dockerfile: devops/Dockerfiles/Dockerfile.dashboard
    ports:
      - "8501:8501"
    depends_on:
      - backend
    volumes:
      - ../.env:/app/.env
    networks:
      - cyber-net

  # Kafka service for real-time processing
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami
    networks:
      - cyber-net

      # Zookeeper for Kafka
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami
    networks:
      - cyber-net

  # Redis for caching
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cyber-net

  # Optional Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - cyber-net